// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: todo.sql

package db

import (
	"context"
	"database/sql"
)

const createTodo = `-- name: CreateTodo :one
INSERT INTO todos (
  user_id,
  title,
  finished,
  deadline
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, title, user_id, finished, deadline, created_at, updated_at
`

type CreateTodoParams struct {
	UserID   int32        `json:"user_id"`
	Title    string       `json:"title"`
	Finished bool         `json:"finished"`
	Deadline sql.NullTime `json:"deadline"`
}

func (q *Queries) CreateTodo(ctx context.Context, arg CreateTodoParams) (Todo, error) {
	row := q.db.QueryRowContext(ctx, createTodo,
		arg.UserID,
		arg.Title,
		arg.Finished,
		arg.Deadline,
	)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.UserID,
		&i.Finished,
		&i.Deadline,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTodo = `-- name: DeleteTodo :exec
DELETE FROM todos
WHERE id = $1
`

func (q *Queries) DeleteTodo(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteTodo, id)
	return err
}

const listTodos = `-- name: ListTodos :many
SELECT id, title, user_id, finished, deadline, created_at, updated_at FROM todos
WHERE user_id = $1
ORDER BY id
`

func (q *Queries) ListTodos(ctx context.Context, userID int32) ([]Todo, error) {
	rows, err := q.db.QueryContext(ctx, listTodos, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Todo
	for rows.Next() {
		var i Todo
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.UserID,
			&i.Finished,
			&i.Deadline,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTodo = `-- name: UpdateTodo :one
UPDATE todos
SET
  title = $2,
  finished = $3
WHERE id = $1
RETURNING id, title, user_id, finished, deadline, created_at, updated_at
`

type UpdateTodoParams struct {
	ID       int32  `json:"id"`
	Title    string `json:"title"`
	Finished bool   `json:"finished"`
}

func (q *Queries) UpdateTodo(ctx context.Context, arg UpdateTodoParams) (Todo, error) {
	row := q.db.QueryRowContext(ctx, updateTodo, arg.ID, arg.Title, arg.Finished)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.UserID,
		&i.Finished,
		&i.Deadline,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
